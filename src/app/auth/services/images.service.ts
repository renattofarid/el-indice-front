import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, catchError, of } from 'rxjs';
import { environment } from 'src/environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ImagesService {

  private _baseUrl: string = environment.baseUrl;
  private _headers = new HttpHeaders({
    'Content': 'application/json',
    'Accept': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
  });
  constructor(
    private http: HttpClient,
  ) { }

  getAllImages(): Observable<Image[]> {
    return this.http.get<Image[]>(`${this._baseUrl}/api/images`)
  }

  getImage(id: number): Observable<Image> {
    return this.http.get<Image>(`${this._baseUrl}/api/images/${id}`)
  }

  createImage(formData: any): Observable<Image> {
    const _token = localStorage.getItem('token') || '';
    return this.http.post<Image>(`${this._baseUrl}/api/images`, formData, {
      headers: new HttpHeaders({
        'Authorization': `Bearer ${_token}`,
        'X-Requested-With': 'XMLHttpRequest',
      })
    })
  }

  updateImage(id: number, formData: any): Observable<Image> {
    const _token = localStorage.getItem('token') || '';
    return this.http.post<Image>(`${this._baseUrl}/api/images/${id}`, formData, {
      headers: this._headers
        .append('Content-Type', 'multipart/form-data')
        .append('Authorization', `Bearer ${_token}`)
    })
  }

  deleteImage(id: number): Observable<boolean> {
    const _token = localStorage.getItem('token') || '';
    return this.http.delete<boolean>(`${this._baseUrl}/api/images/${id}`, {
      headers: this._headers
        .append('Content-Type', 'multipart/form-data')
        .append('Authorization', `Bearer ${_token}`)
    }).pipe(
      catchError(error => of(false))
    )
  }
}

// Generated by https://quicktype.io

export interface Image {
  id:                number;
  category_image_id: number;
  created_at:        string;
  updated_at:        string;
  media:             Media[];
}

export interface Media {
  id:                    number;
  model_type:            string;
  model_id:              number;
  uuid:                  string;
  collection_name:       string;
  name:                  string;
  file_name:             string;
  mime_type:             string;
  disk:                  string;
  conversions_disk:      string;
  size:                  number;
  manipulations:         any[];
  custom_properties:     any[];
  generated_conversions: any[];
  responsive_images:     any[];
  order_column:          number;
  created_at:            string;
  updated_at:            string;
  original_url:          string;
  preview_url:           string;
}
